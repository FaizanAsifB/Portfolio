---
import ThemeSwitch from "@/components/ui/ThemeSwitch.tsx";

const navLinks = [
  {
    title: "Home",
    href: "#hero",
  },
  {
    title: "About",
    href: "#about",
  },
  {
    title: "Skills",
    href: "#skills",
  },
  {
    title: "Projects",
    href: "#projects",
  },
  {
    title: "Contact",
    href: "#contact",
  },
];
---

<header
  data-scrolled="false"
  class="w-full shadow-sm bg-transparent fixed top-0 z-50 py-6 data-[scrolled=true]:bg-background/90"
>
  <div class="container flex items-center justify-between text-2xl">
    <p class="text-[#ca2e55] font-semibold">
      &lt;<span class="text-primary">FA </span>/&gt;
    </p>
    <nav class="flex gap-8 items-center">
      <ul class="flex gap-8">
        {
          navLinks.map((link) => (
            <li>
              <a
                href={link.href}
                data-scrolled="false"
                class="relative before:transition-transform before:duration-300 before:absolute before:w-full before:h-1 before:rounded-sm before:-bottom-1 before:left:0 before:origin-right before:scale-x-0 before:bg-primary hover:before:origin-left hover:before:scale-x-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background rounded-lg data-[scrolled=true]:before:origin-left 
                data-[scrolled=true]:before:scale-x-100"
              >
                {link.title}
              </a>
            </li>
          ))
        }
      </ul>
      <ThemeSwitch client:load />
    </nav>
  </div>
</header>

<script>
  const navLinkEls = document.querySelectorAll(
    "nav>ul>li>a",
  ) as NodeListOf<HTMLAnchorElement>;
  const sectionEls = document.querySelectorAll("section");
  const heroEl = document.querySelector("#hero img") as HTMLImageElement;
  const headerEl = document.querySelector("header") as HTMLElement;
  const headerBot = headerEl?.offsetHeight;
  const heroTop = heroEl.offsetTop;

  const intersectedHero = () => {
    if (
      window.scrollY >= heroTop - headerBot &&
      headerEl.dataset.scrolled === "false"
    )
      headerEl.dataset.scrolled = "true";
    if (
      window.scrollY <= heroTop - headerBot &&
      headerEl.dataset.scrolled === "true"
    )
      headerEl.dataset.scrolled = "false";
  };

  const intersectedSections = () => {
    if (
      window.scrollY >= heroTop - headerBot &&
      headerEl.dataset.scrolled === "false"
    )
      headerEl.dataset.scrolled = "true";

    sectionEls.forEach((sectionEl) => {
      if (
        window.scrollY >= sectionEl.offsetTop - 200 &&
        window.scrollY < sectionEl.offsetHeight + sectionEl.offsetTop
      )
        navLinkEls.forEach((navLinkEl) => {
          navLinkEl.dataset.scrolled = "false";
          if (navLinkEl.href.includes(sectionEl.id))
            navLinkEl.dataset.scrolled = "true";
        });
    });
  };

  const handleIntersections = () => {
    intersectedHero();
    intersectedSections();
  };

  (() => handleIntersections())();

  window.onscroll = () => {
    handleIntersections();
  };
</script>
